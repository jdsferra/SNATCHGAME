if (length(char1) == length(char2))
print('Equal Length')
else
print('Not Equal Length')
}
compare('EPS568', 'SummerA')
compare = function(char1, char2) {
if (length(char1) == length(char2))
print('Equal Length')
else
print('Not Equal Length')
}
compare('EPS568', 'SummerA')
compare = function(char1, char2) {
if (length(char1) == length(char2))
print('Equal Length')
else
print('Not Equal Length')
}
compare('EPS568', 'SummerAasdfasdf')
compare = function(char1, char2) {
if (length(char1) == length(char2))
print('Equal Length') else
print('Not Equal Length')
}
compare('EPS568', 'SummerAasdfasdf')
compare = function(char1, char2) {
if (length(char1) == length(char2))
print('Equal Length') else
print('Not Equal Length')
}
compare('EPS568', 'SummerAasdfasdf')
compare = function(char1, char2) {
if (length(char1) == length(char2))
return('Equal Length') else
return('Not Equal Length')
}
compare('EPS568', 'SummerAasdfasdf')
compare = function(char1, char2) {
if (length(char1) == length(char2))
return('Equal Length') else
return('Not Equal Length')
}
compare('EPS568', 'SummerAasdfasdf')
compare = function(char1, char2) {
if (length(char1) == length(char2))
return('Equal Length') else
return('Not Equal Length')
}
compare('EPS568', 'SummerA')
compare('EPS568', 'SummerA')
length('EPS568')
strlength('EPS568')
nchar('EPS568')
compare = function(char1, char2) {
if (nchar(char1) == nchar(char2))
return('Equal Length') else
return('Not Equal Length')
}
compare('EPS568', 'Summer')
compare = function(char1, char2) {
if (nchar(char1) == nchar(char2))
return('Equal Length') else
return('Not Equal Length')
}
compare('EPS568', 'SummerAA')
compare = function(char1, char2) {
if (nchar(char1) == nchar(char2))
return('Equal Length') else
return('Not Equal Length')
}
compare('EPS568', 'Summer')
compare('EPS568', 'SummerA')
median(c(1, 2, 3, 4, 5))
median(c(1, 2, 4, 4, 5))
median(c(1, 2, 4, 4, 200))
absolute value?
?absolute value
?abs
?mad
mad(c(1, 8, 2, 3, 4, 5, 1, 23, 6, 7, 8))
mymad = function(X) {
return(median(abs(X - median(X))))
}
mad(c(1, 8, 2, 3, 4, 5, 1, 23, 6, 7, 8))
mymad(c(1, 8, 2, 3, 4, 5, 1, 23, 6, 7, 8))
median(abs(X - median(X)))
mymad = function(X) {
return(median(abs(X - median(X))))
}
#mad(c(1, 8, 2, 3, 4, 5, 1, 23, 6, 7, 8))
#mymad(c(1, 8, 2, 3, 4, 5, 1, 23, 6, 7, 8))
X = c(1, 8, 2, 3, 4, 5, 1, 23, 6, 7, 8)
median(abs(X - median(X)))
X - median(X)
abs(X - median(X))
median(abs(X - median(X)))
mymad = function(X) {
return(median(abs(X - median(X))))
}
X = c(1, 8, 2, 3, 4, 5, 1, 23, 6, 7, 8)
mad(X, constant = 1)
mymad(X)
matvec = c(1, 2, 3, 4, 5, 6)
matrix1 <- matrix(matvec, nrow = 2, ncol = 3)
matrix1
matvec = c(1, 2, 3, 4, 5, 6)
matrix1 <- matrix(matvec, nrow = 2, ncol = 3)
mulvec = c(2, 0, 1)
matrix1 * mulvec
i=2
x = c(1, 2)
while (x[i] < 4000000) {
x[i+1] = x[i-1] + x[i]
i=i+1 }
x = x[-i]
sum(x * c(0,1))
A = data.frame(c(1, 2, 3), c(1, 2, 3), c(1, 2, 3))
A
A = data.frame(c(1, 2, 3), c(1, 2, 3), c(1, 2, 3))
A
x = c(1, 2, 3)
result = c()
for (i in 1:ncol(A)){
total[i] = total[i] + A[i,j]*x[j]
}
A = data.frame(c(1, 2, 3), c(1, 2, 3), c(1, 2, 3))
A
x = c(1, 2, 3)
result = c()
for (i in 1:ncol(A)){
result[i] = result[i] + A[i,j]*x[j]
}
A = data.frame(c(1, 2, 3), c(1, 2, 3), c(1, 2, 3))
A
x = c(1, 2, 3)
result = c()
for (i in 1:ncol(A)){
result[i]=0
for (j in 1:ncol(A)){
result[i] = result[i] + A[i,j]*x[j]
}
}
result
install.packages('rmarkdown', dependencies = TRUE)
result
install.packages("rmarkdown", dependencies = TRUE)
library(dplyr)
install.packages('dplyr')
library(dplyr)
library(dplyr)
install.packages("dplyr")
install.packages("tidyverse")
library('dplyr')
library('dplyr')
install.packages('dplyr')
library('dplyr')
install.packages("tidyverse")
library('dplyr')
install.packages("tidyverse", dependences = TRUE)
library('dplyr')
install.packages("tidyverse")
library('dplyr')
library('dplyr')
packages.install('dplyr')
install.packages('dplyr')
library('dplyr')
install.packages('tidyverse')
library('dplyr')
install.packages(c("dplyr", "tibble", "magrittr", "tidyr", "psych", "ggplot2"))
library('tidyr')
library('dplyr')
.libPaths()
install.packages('tidyverse', dependences = TRUE)
library('dplyr')
install.packages('stringr', dependencies = TRUE)
librar('stringr')
library('stringr')
library("Rcpp", lib.loc="~/anaconda3/envs/tryout2/lib/R/library")
install.packages("Rcpp")
install.packages('tidyverse', dependencies = TRUE)
library('tidyverse')
library("Rcpp", lib.loc="~/anaconda3/envs/tryout2/lib/R/library")
detach("package:Rcpp", unload=TRUE)
install.packages("tidyverse")
install.packages("~/Downloads/tidyverse_2.0.0.tar", repos = NULL)
library('tidyverse')
library("magrittr", lib.loc="~/anaconda3/envs/tryout2/lib/R/library")
install.packages("magrittr")
library("magrittr", lib.loc="~/anaconda3/envs/tryout2/lib/R/library")
detach("package:magrittr", unload=TRUE)
library("magrittr", lib.loc="~/anaconda3/envs/tryout2/lib/R/library")
library('tidyverse')
install.packages("~/Downloads/magrittr_2.0.3.tar", repos = NULL)
library('tidyverse')
library('tidyverse')
install.packages('tidyverse', dependencies = TRUE)
library('tidyverse')
library('tidyverse')
library(magrittr)
detach("package:magrittr", unload=TRUE)
library("magrittr", lib.loc="~/anaconda3/envs/tryout2/lib/R/library")
df
df <- data.frame(
color = c("blue","black", "blue", "blue","black"),
value = 1:5)
df
library(ggplot2)
library(dplyr)
library('ggplot2')
library('dplyr')
library('tidyverse')
library('stringr')
install.packages('ggplot2', dependencies = TRUE)
library('ggplot2')
library('ggplot2')
library('dplyr')
install.packages('tidyverse', dependencies = TRUE)
library('tidyverse')
install.packages('tidyverse', dependencies = TRUE, type = binary)
install.packages('tidyverse', dependencies = TRUE, type = Binary)
install.packages('tidyverse', dependencies = TRUE, type = 'binary')
install.packages('shiny')
install.packages('shiny')
library('shiny')
shiny::runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
library(scales)
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
#--------------------------------------------------------------
genrecheck <- bigjoin2 %>% distinct(uniqueid, season, internat, queen, character, tsb, score, genres)
genrecheck <- genrecheck %>% filter(genres %in% c('musician', 'pubfig'))
#---------------------
ggplot(genrecheck %>% group_by(genres) %>% mutate(weight = 1/n()),
aes(x = tsb, fill = genres)) +
geom_bar(aes(weight = weight), stat = 'count', position = 'dodge') + labs(title = 'Percent Placement by Genre', x = 'Placement', y = 'Percentage')
#---
genrecheck1 %>% group_by(genres) %>% mutate(weight = 1/n()) %>%
ggplot(aes(x = tsb, fill = genres)) + geom_bar(aes(weight = weight), stat = 'count', position = 'dodge') +
labs(title = 'Percent Placement by Genre', x = 'Placement', y = 'Percentage')
#---
genrecheck %>% group_by(genres) %>% mutate(weight = 1/n()) %>%
ggplot(aes(x = tsb, fill = genres)) + geom_bar(aes(weight = weight), stat = 'count', position = 'dodge') +
labs(title = 'Percent Placement by Genre', x = 'Placement', y = 'Percentage')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
shiny::runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
shiny::runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
mydoa
mydoa <- t.test(alldead$score, allalive$score) #pval is .02- dead character avg is significantly different from alive character avg
deadalivecheck <- bigjoin2 %>% distinct(uniqueid, character, score, alive)
allalive
allalive <- deadalivecheck %>% filter(alive == 1)
alldead <- deadalivecheck %>% filter(alive == 0)
mydoa <- t.test(alldead$score, allalive$score) #pval is .02- dead character avg is significantly different from alive character avg
mydoa
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
shiny::runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
shiny::runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
d <-  genrecheck %>% group_by(genres) %>% mutate(genre_count = n(), avgscore = round(mean(score), 3)) %>%
ungroup() %>% mutate(
genre_update = as.factor(genres, levels = c('Porn Star', 'Athlete')),
genre_update = paste0(genres, "; n=", genre_count, "; Mean Score: ", avgscore),
)
d <-  genrecheck %>% group_by(genres) %>% mutate(genre_count = n(), avgscore = round(mean(score), 3)) %>%
ungroup() %>% mutate(
genre_update = as.factor(genres, levels = c('Reality', 'Government')),
genre_update = paste0(genres, "; n=", genre_count, "; Mean Score: ", avgscore),
)
d <-  genrecheck %>% group_by(genres) %>% mutate(genre_count = n(), avgscore = round(mean(score), 3)) %>%
ungroup() %>% mutate(
genre_update = factor(genres, levels = c('Reality', 'Government')),
genre_update = paste0(genres, "; n=", genre_count, "; Mean Score: ", avgscore),
)
class(d$genre_update)
#%>%
#    ggplot(aes(x = tsb, fill = genres)) + geom_bar()+ scale_y_continuous(breaks= pretty_breaks()) +
#    scale_fill_manual(values = c("#8344AD", "#27AE60")) + facet_wrap(~genre_update) +
#    labs(title = 'Genre Comparison by Count', x = 'Placement', y = 'Count')
d <-  genrecheck %>% group_by(genres) %>% mutate(genre_count = n(), avgscore = round(mean(score), 3)) %>%
ungroup() %>% mutate(
genre_update = factor(genres, levels = c('Reality', 'Government')),
)
class(d$genre_update)
#%>%
#    ggplot(aes(x = tsb, fill = genres)) + geom_bar()+ scale_y_continuous(breaks= pretty_breaks()) +
#    scale_fill_manual(values = c("#8344AD", "#27AE60")) + facet_wrap(~genre_update) +
#    labs(title = 'Genre Comparison by Count', x = 'Placement', y = 'Count')
output$bar1 <-
bar1 <- genrecheck1() %>% group_by(genres) %>% mutate(genre_count = n(), avgscore = round(mean(score), 3)) %>%
ungroup() %>% mutate(genre_update = paste0(genres, "; n=", genre_count, "; Mean Score: ", avgscore)
2+2
output$bar1 <-
bar1 <- genrecheck1() %>% group_by(genres) %>% mutate(genre_count = n(), avgscore = round(mean(score), 3)) %>%
ungroup() %>% mutate(genre_update = paste0(genres, "; n=", genre_count, "; Mean Score: ", avgscore)
2
output$bar1 <-
bar1 <- genrecheck1() %>% group_by(genres) %>% mutate(genre_count = n(), avgscore = round(mean(score), 3)) %>%
ungroup() %>% mutate(genre_update = paste0(genres, "; n=", genre_count, "; Mean Score: ", avgscore)
2
output$bar1 <-
bar1 <- genrecheck1() %>% group_by(genres) %>% mutate(genre_count = n(), avgscore = round(mean(score), 3)) %>%
ungroup() %>% mutate(genre_update = paste0(genres, "; n=", genre_count, "; Mean Score: ", avgscore)
2
extractgenre <- sub(" ; .*", "", genre_update)
#output$bar1 <-
bar1 <- genrecheck1() %>% group_by(genres) %>% mutate(genre_count = n(), avgscore = round(mean(score), 3)) %>%
ungroup() %>% mutate(genre_update = paste0(genres, "; n=", genre_count, "; Mean Score: ", avgscore))
extractgenre <- sub(" ; .*", "", genre_update)
extractgenre <- sub(" ; .*", "", bar1$genre_update)
#output$bar1 <-
bar1 <- genrecheck1() %>% group_by(genres) %>% mutate(genre_count = n(), avgscore = round(mean(score), 3)) %>%
ungroup() %>% mutate(genre_update = paste0(genres, "; n=", genre_count, "; Mean Score: ", avgscore))
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
getwd()
library(tidyverse)
eps <- read.csv('./SGStats/eps.csv')
queens <- read.csv('./SGStats/queens.csv')
names(queens) <- queens[1,]
queens <- queens[-1,]
colnames(queens)[2] <- 'queen'
chars <- read.csv('./SGStats/chars.csv')
sapply(eps, class)
eps$airdate <- as.Date(eps$airdate)
eps$regas <- as.factor(eps$regas)
eps$internat <- as.factor(eps$internat)
eps$specialformat <- as.factor(eps$specialformat)
summary(eps)
sapply(queens, class)
queens$character2[queens$character2 == "N/A"] <- NA
queens$uniqueid <- as.numeric(queens$uniqueid)
sapply(chars, class)
chars$alive <- as.factor(chars$alive)
chars$genre <- as.factor(chars$genre)
chars$genre2 <- as.factor(chars$genre2)
chars$genre3 <- as.factor(chars$genre3)
chars1 <- chars[1:5]
chars2 <- chars[, -c(3:5)]
chars1
chars2
#eps[10:31]
epspivot <- pivot_longer(eps, cols = 10:31, names_to = 'plcmnt', values_to = 'queen', values_drop_na = T) %>% filter(queen != 'N/A')
queenspivot <- pivot_longer(queens, cols = 3:4, values_to = 'character') %>% drop_na(character) %>% select(c(1, 2, 4))
chars1[4:5][chars1[4:5] == "N/A"] <- NA
char1pivot <- pivot_longer(chars1, cols = 3:5, values_to = 'genres') %>% drop_na(genres)
char1pivot <- char1pivot[-3]
char2pivot <- pivot_longer(chars2, cols = 3:13, values_to = 'genres') %>% drop_na(genres)
char2pivot = char2pivot[-4]
char2pivot <- char2pivot %>% rename('genres' = 'name')
epqueenjoin <- inner_join(epspivot, queenspivot, by = c('uniqueid', 'queen'), multiple = 'all')
myby <- join_by(character == char)
bigjoin1 <- inner_join(epqueenjoin, char1pivot, myby)
bigjoin2 <- inner_join(epqueenjoin, char2pivot, myby)
bigjoin2$genres <- as.factor(bigjoin2$genres)
summary(bigjoin2)
bigjoin1 <- bigjoin1 %>%
mutate(tsb = case_when(startsWith(tolower(plcmnt), 'safe') ~ 'SAFE',
startsWith(tolower(plcmnt), 'win') ~ 'WIN',
startsWith(tolower(plcmnt), 'high') ~ 'HIGH',
startsWith(tolower(plcmnt), 'bottom') ~ 'BOTTOM',
startsWith(tolower(plcmnt), 'elim') ~ 'ELIM'))
bigjoin2 <- bigjoin2 %>%
mutate(tsb = case_when(startsWith(tolower(plcmnt), 'safe') ~ 'SAFE',
startsWith(tolower(plcmnt), 'win') ~ 'WIN',
startsWith(tolower(plcmnt), 'high') ~ 'HIGH',
startsWith(tolower(plcmnt), 'bottom') ~ 'BOTTOM',
startsWith(tolower(plcmnt), 'elim') ~ 'ELIM'))
bigjoin1$tsb <- factor(bigjoin1$tsb, levels = c('ELIM', 'BOTTOM', 'SAFE', 'HIGH', 'WIN'))
bigjoin2$tsb <- factor(bigjoin2$tsb, levels = c('ELIM', 'BOTTOM', 'SAFE', 'HIGH', 'WIN'))
#summary(bigjoin)
bigjoin1 <- bigjoin1 %>%
mutate(score = case_when(tsb == 'WIN' ~ 1,
tsb == 'HIGH' ~ .5,
tsb == 'SAFE' ~ 0,
tsb == 'BOTTOM' ~ -.5,
tsb == 'ELIM' ~ -1))
bigjoin1 %>% group_by(genres) %>% summarise(avgscore = mean(score)) %>% arrange(desc(avgscore))
bigjoin2 <- bigjoin2 %>%
mutate(score = case_when(tsb == 'WIN' ~ 1,
tsb == 'HIGH' ~ .5,
tsb == 'SAFE' ~ 0,
tsb == 'BOTTOM' ~ -.5,
tsb == 'ELIM' ~ -1))
bigjoin2 %>% group_by(genres) %>% summarise(avgscore = mean(score)) %>% arrange(desc(avgscore))
write.csv(bigjoin1, 'bigjoin1.csv', row.names=F)
write.csv(bigjoin2, 'bigjoin2.csv', row.names=F)
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
shiny::runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
getwd()
library(tidyverse)
eps <- read.csv('./SGStats/eps.csv')
queens <- read.csv('./SGStats/queens.csv')
names(queens) <- queens[1,]
queens <- queens[-1,]
colnames(queens)[2] <- 'queen'
chars <- read.csv('./SGStats/chars.csv')
sapply(eps, class)
eps$airdate <- as.Date(eps$airdate)
eps$regas <- as.factor(eps$regas)
eps$internat <- as.factor(eps$internat)
eps$specialformat <- as.factor(eps$specialformat)
summary(eps)
sapply(queens, class)
queens$character2[queens$character2 == "N/A"] <- NA
queens$uniqueid <- as.numeric(queens$uniqueid)
sapply(chars, class)
chars$alive <- as.factor(chars$alive)
chars$genre <- as.factor(chars$genre)
chars$genre2 <- as.factor(chars$genre2)
chars$genre3 <- as.factor(chars$genre3)
chars1 <- chars[1:5]
chars2 <- chars[, -c(3:5)]
chars1
chars2
#eps[10:31]
epspivot <- pivot_longer(eps, cols = 10:31, names_to = 'plcmnt', values_to = 'queen', values_drop_na = T) %>% filter(queen != 'N/A')
queenspivot <- pivot_longer(queens, cols = 3:4, values_to = 'character') %>% drop_na(character) %>% select(c(1, 2, 4))
chars1[4:5][chars1[4:5] == "N/A"] <- NA
char1pivot <- pivot_longer(chars1, cols = 3:5, values_to = 'genres') %>% drop_na(genres)
char1pivot <- char1pivot[-3]
char2pivot <- pivot_longer(chars2, cols = 3:13, values_to = 'genres') %>% drop_na(genres)
char2pivot = char2pivot[-4]
char2pivot <- char2pivot %>% rename('genres' = 'name')
epqueenjoin <- inner_join(epspivot, queenspivot, by = c('uniqueid', 'queen'), multiple = 'all')
myby <- join_by(character == char)
bigjoin1 <- inner_join(epqueenjoin, char1pivot, myby)
bigjoin2 <- inner_join(epqueenjoin, char2pivot, myby)
bigjoin2$genres <- as.factor(bigjoin2$genres)
summary(bigjoin2)
bigjoin1 <- bigjoin1 %>%
mutate(tsb = case_when(startsWith(tolower(plcmnt), 'safe') ~ 'SAFE',
startsWith(tolower(plcmnt), 'win') ~ 'WIN',
startsWith(tolower(plcmnt), 'high') ~ 'HIGH',
startsWith(tolower(plcmnt), 'bottom') ~ 'BOTTOM',
startsWith(tolower(plcmnt), 'elim') ~ 'ELIM'))
bigjoin2 <- bigjoin2 %>%
mutate(tsb = case_when(startsWith(tolower(plcmnt), 'safe') ~ 'SAFE',
startsWith(tolower(plcmnt), 'win') ~ 'WIN',
startsWith(tolower(plcmnt), 'high') ~ 'HIGH',
startsWith(tolower(plcmnt), 'bottom') ~ 'BOTTOM',
startsWith(tolower(plcmnt), 'elim') ~ 'ELIM'))
bigjoin1$tsb <- factor(bigjoin1$tsb, levels = c('ELIM', 'BOTTOM', 'SAFE', 'HIGH', 'WIN'))
bigjoin2$tsb <- factor(bigjoin2$tsb, levels = c('ELIM', 'BOTTOM', 'SAFE', 'HIGH', 'WIN'))
#summary(bigjoin)
bigjoin1 <- bigjoin1 %>%
mutate(score = case_when(tsb == 'WIN' ~ 1,
tsb == 'HIGH' ~ .5,
tsb == 'SAFE' ~ 0,
tsb == 'BOTTOM' ~ -.5,
tsb == 'ELIM' ~ -1))
bigjoin1 %>% group_by(genres) %>% summarise(avgscore = mean(score)) %>% arrange(desc(avgscore))
bigjoin2 <- bigjoin2 %>%
mutate(score = case_when(tsb == 'WIN' ~ 1,
tsb == 'HIGH' ~ .5,
tsb == 'SAFE' ~ 0,
tsb == 'BOTTOM' ~ -.5,
tsb == 'ELIM' ~ -1))
bigjoin2 %>% group_by(genres) %>% summarise(avgscore = mean(score)) %>% arrange(desc(avgscore))
write.csv(bigjoin1, 'bigjoin1.csv', row.names=F)
write.csv(bigjoin2, 'bigjoin2.csv', row.names=F)
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
