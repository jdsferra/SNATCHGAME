seq(50000, 1, -1)
sum(1:50000)
v
v = 1:50000
v
w = seq(50000, 1, -1)/sum(1:50000)
class(v)
v = 1:50000
w = seq(50000, 1, -1)/sum(1:50000)
weightedmean = 0
for (i in 1:50000){
weightedmean = weightedmean + (w[i] * v[i])
}
weightedmean
system.time({for (i in 1:50000){
weightedmean = weightedmean + (w[i] * v[i])
}
})
v = 1:50000
w = seq(50000, 1, -1)/sum(1:50000)
weightedmean = 0
system.time({for (i in 1:50000){
weightedmean = weightedmean + (w[i] * v[i])
}
})
weightedmean
v = 1:50000
w = seq(50000, 1, -1)/sum(1:50000)
weightedmean = 0
system.time({for (i in 1:50000){
weightedmean = weightedmean + (w[i] * v[i])
}
})
weightedmean
system.time(v * w)
v = 1:50000
w = seq(50000, 1, -1)/sum(1:50000)
weightedmean = 0
system.time({for (i in 1:50000){
weightedmean = weightedmean + (w[i] * v[i])
}
})
weightedmean
system.time(sum(v * w))
print(sum(v*w))
?mean
a <- c('NPR', 'NYT', 'MSNBC')
b <- c('WSJ', 'NPR', 'FOX')
intersect(a, b)
a <- c('NPR', 'NYT', 'MSNBC')
b <- c('WSJ', 'NPR', 'FOX')
'%int%' = function(x, y) {
intersect(x, y)
}
a %int% b
tax_calc = function(inc) {
if (inc <= 50000) {
owed = inc * .1} else
{owed = ((inc-50000) *.2) + 50000*.1
return owed
tax_calc = function(inc) {
if (inc <= 50000) {
owed = inc * .1} else
{owed = ((inc-50000) *.2) + 50000*.1}
return owed
tax_calc = function(inc) {
if (inc <= 50000) {
owed = inc * .1} else
{owed = ((inc-50000) *.2) + 50000*.1)}
tax_calc = function(inc) {
below50K = min(inc, 50000)
above50K = max(0, inc-50000)
return(below50K * .1 + above50K * .2)
}
tax_calc(50000)
tax_calc = function(inc) {
below50K = min(inc, 50000)
above50K = max(0, inc-50000)
return(below50K * .1 + above50K * .2)
}
tax_calc(55000)
Fac2 = function(i) {
return(prod(1:i))
}
Fac2(5)
dim(iris)
dim(iris)
iris2 = iris
dim(iris2)
dim(iris)
iris2 = iris
dim(iris2)
dim(iris) == dim(iris2)
'%~%' = function(df1, df2) {
if (all(dim(df1) == dim(df2))
print(TRUE) else
'%~%' = function(df1, df2) {
if (all(dim(df1) == dim(df2)))
print(TRUE) else
print(FALSE)
}
iris2 = iris
iris %~% iris2
'%~%' = function(df1, df2) {
return(all(dim(df1) == dim(df2)))
}
iris2 = iris
iris %~% iris2
i=3
x = c(1, 2)
while (x[i] < 4000000) {
x[i+1] = x[i-1] + x[i]
i=i+1 }
i=2
x = c(1, 2)
while (x[i] < 4000000) {
x[i+1] = x[i-1] + x[i]
i=i+1 }
x = x[-i]
print(x)
2178309 + 3524578
class(x)
x * c(0,1)
sum(x * c(0,1))
names <- c('John', 'Andrew', 'Thomas')
gmail <- c('@gmail.com')
paste(names, gmail, collapse='; ')
names <- c('John', 'Andrew', 'Thomas')
gmail <- c('gmail.com')
paste(names, gmail, sep='@', collapse='; ')
firstvec = rep(c('a', 'b', 'c', 'd', 'e'), 5)
secondvec = rep(c('a', 'b', 'c', 'd', 'e'), c(5, 5, 5, 5, 5))
firstvec
firstvec = rep(c('a', 'b', 'c', 'd', 'e'), 5)
secondvec = rep(c('a', 'b', 'c', 'd', 'e'), c(5, 5, 5, 5, 5))
secondvec
x = rep(c('a', 'b', 'c', 'd', 'e'), 5)
y = rep(c('a', 'b', 'c', 'd', 'e'), c(5, 5, 5, 5, 5))
print(paste(x, y))
x = rep(c('a', 'b', 'c', 'd', 'e'), 5)
y = rep(c('a', 'b', 'c', 'd', 'e'), c(5, 5, 5, 5, 5))
print(paste(x,y))
x = rep(c('a', 'b', 'c', 'd', 'e'), 5)
y = rep(c('a', 'b', 'c', 'd', 'e'), c(5, 5, 5, 5, 5))
print(paste0(x,y))
compare = function(char1, char2) {
if (length(char1) == length(char2))
print('Equal Length')
else
print('Not Equal Length')
}
compare('EPS568', 'Summer')
compare = function(char1, char2) {
if (length(char1) == length(char2))
print('Equal Length')
else
print('Not Equal Length')
}
compare('EPS568', 'SummerA')
compare = function(char1, char2) {
if (length(char1) == length(char2))
print('Equal Length')
else
print('Not Equal Length')
}
compare('EPS568', 'SummerA')
compare = function(char1, char2) {
if (length(char1) == length(char2))
print('Equal Length')
else
print('Not Equal Length')
}
compare('EPS568', 'SummerAasdfasdf')
compare = function(char1, char2) {
if (length(char1) == length(char2))
print('Equal Length') else
print('Not Equal Length')
}
compare('EPS568', 'SummerAasdfasdf')
compare = function(char1, char2) {
if (length(char1) == length(char2))
print('Equal Length') else
print('Not Equal Length')
}
compare('EPS568', 'SummerAasdfasdf')
compare = function(char1, char2) {
if (length(char1) == length(char2))
return('Equal Length') else
return('Not Equal Length')
}
compare('EPS568', 'SummerAasdfasdf')
compare = function(char1, char2) {
if (length(char1) == length(char2))
return('Equal Length') else
return('Not Equal Length')
}
compare('EPS568', 'SummerAasdfasdf')
compare = function(char1, char2) {
if (length(char1) == length(char2))
return('Equal Length') else
return('Not Equal Length')
}
compare('EPS568', 'SummerA')
compare('EPS568', 'SummerA')
length('EPS568')
strlength('EPS568')
nchar('EPS568')
compare = function(char1, char2) {
if (nchar(char1) == nchar(char2))
return('Equal Length') else
return('Not Equal Length')
}
compare('EPS568', 'Summer')
compare = function(char1, char2) {
if (nchar(char1) == nchar(char2))
return('Equal Length') else
return('Not Equal Length')
}
compare('EPS568', 'SummerAA')
compare = function(char1, char2) {
if (nchar(char1) == nchar(char2))
return('Equal Length') else
return('Not Equal Length')
}
compare('EPS568', 'Summer')
compare('EPS568', 'SummerA')
median(c(1, 2, 3, 4, 5))
median(c(1, 2, 4, 4, 5))
median(c(1, 2, 4, 4, 200))
absolute value?
?absolute value
?abs
?mad
mad(c(1, 8, 2, 3, 4, 5, 1, 23, 6, 7, 8))
mymad = function(X) {
return(median(abs(X - median(X))))
}
mad(c(1, 8, 2, 3, 4, 5, 1, 23, 6, 7, 8))
mymad(c(1, 8, 2, 3, 4, 5, 1, 23, 6, 7, 8))
median(abs(X - median(X)))
mymad = function(X) {
return(median(abs(X - median(X))))
}
#mad(c(1, 8, 2, 3, 4, 5, 1, 23, 6, 7, 8))
#mymad(c(1, 8, 2, 3, 4, 5, 1, 23, 6, 7, 8))
X = c(1, 8, 2, 3, 4, 5, 1, 23, 6, 7, 8)
median(abs(X - median(X)))
X - median(X)
abs(X - median(X))
median(abs(X - median(X)))
mymad = function(X) {
return(median(abs(X - median(X))))
}
X = c(1, 8, 2, 3, 4, 5, 1, 23, 6, 7, 8)
mad(X, constant = 1)
mymad(X)
matvec = c(1, 2, 3, 4, 5, 6)
matrix1 <- matrix(matvec, nrow = 2, ncol = 3)
matrix1
matvec = c(1, 2, 3, 4, 5, 6)
matrix1 <- matrix(matvec, nrow = 2, ncol = 3)
mulvec = c(2, 0, 1)
matrix1 * mulvec
i=2
x = c(1, 2)
while (x[i] < 4000000) {
x[i+1] = x[i-1] + x[i]
i=i+1 }
x = x[-i]
sum(x * c(0,1))
A = data.frame(c(1, 2, 3), c(1, 2, 3), c(1, 2, 3))
A
A = data.frame(c(1, 2, 3), c(1, 2, 3), c(1, 2, 3))
A
x = c(1, 2, 3)
result = c()
for (i in 1:ncol(A)){
total[i] = total[i] + A[i,j]*x[j]
}
A = data.frame(c(1, 2, 3), c(1, 2, 3), c(1, 2, 3))
A
x = c(1, 2, 3)
result = c()
for (i in 1:ncol(A)){
result[i] = result[i] + A[i,j]*x[j]
}
A = data.frame(c(1, 2, 3), c(1, 2, 3), c(1, 2, 3))
A
x = c(1, 2, 3)
result = c()
for (i in 1:ncol(A)){
result[i]=0
for (j in 1:ncol(A)){
result[i] = result[i] + A[i,j]*x[j]
}
}
result
install.packages('rmarkdown', dependencies = TRUE)
result
install.packages("rmarkdown", dependencies = TRUE)
library(dplyr)
install.packages('dplyr')
library(dplyr)
library(dplyr)
install.packages("dplyr")
install.packages("tidyverse")
library('dplyr')
library('dplyr')
install.packages('dplyr')
library('dplyr')
install.packages("tidyverse")
library('dplyr')
install.packages("tidyverse", dependences = TRUE)
library('dplyr')
install.packages("tidyverse")
library('dplyr')
library('dplyr')
packages.install('dplyr')
install.packages('dplyr')
library('dplyr')
install.packages('tidyverse')
library('dplyr')
install.packages(c("dplyr", "tibble", "magrittr", "tidyr", "psych", "ggplot2"))
library('tidyr')
library('dplyr')
.libPaths()
install.packages('tidyverse', dependences = TRUE)
library('dplyr')
install.packages('stringr', dependencies = TRUE)
librar('stringr')
library('stringr')
library("Rcpp", lib.loc="~/anaconda3/envs/tryout2/lib/R/library")
install.packages("Rcpp")
install.packages('tidyverse', dependencies = TRUE)
library('tidyverse')
library("Rcpp", lib.loc="~/anaconda3/envs/tryout2/lib/R/library")
detach("package:Rcpp", unload=TRUE)
install.packages("tidyverse")
install.packages("~/Downloads/tidyverse_2.0.0.tar", repos = NULL)
library('tidyverse')
library("magrittr", lib.loc="~/anaconda3/envs/tryout2/lib/R/library")
install.packages("magrittr")
library("magrittr", lib.loc="~/anaconda3/envs/tryout2/lib/R/library")
detach("package:magrittr", unload=TRUE)
library("magrittr", lib.loc="~/anaconda3/envs/tryout2/lib/R/library")
library('tidyverse')
install.packages("~/Downloads/magrittr_2.0.3.tar", repos = NULL)
library('tidyverse')
library('tidyverse')
install.packages('tidyverse', dependencies = TRUE)
library('tidyverse')
library('tidyverse')
library(magrittr)
detach("package:magrittr", unload=TRUE)
library("magrittr", lib.loc="~/anaconda3/envs/tryout2/lib/R/library")
df
df <- data.frame(
color = c("blue","black", "blue", "blue","black"),
value = 1:5)
df
library(ggplot2)
library(dplyr)
library('ggplot2')
library('dplyr')
library('tidyverse')
library('stringr')
install.packages('ggplot2', dependencies = TRUE)
library('ggplot2')
library('ggplot2')
library('dplyr')
install.packages('tidyverse', dependencies = TRUE)
library('tidyverse')
install.packages('tidyverse', dependencies = TRUE, type = binary)
install.packages('tidyverse', dependencies = TRUE, type = Binary)
install.packages('tidyverse', dependencies = TRUE, type = 'binary')
install.packages('shiny')
install.packages('shiny')
library('shiny')
shiny::runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
library(scales)
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
#--------------------------------------------------------------
genrecheck <- bigjoin2 %>% distinct(uniqueid, season, internat, queen, character, tsb, score, genres)
genrecheck <- genrecheck %>% filter(genres %in% c('musician', 'pubfig'))
#---------------------
ggplot(genrecheck %>% group_by(genres) %>% mutate(weight = 1/n()),
aes(x = tsb, fill = genres)) +
geom_bar(aes(weight = weight), stat = 'count', position = 'dodge') + labs(title = 'Percent Placement by Genre', x = 'Placement', y = 'Percentage')
#---
genrecheck1 %>% group_by(genres) %>% mutate(weight = 1/n()) %>%
ggplot(aes(x = tsb, fill = genres)) + geom_bar(aes(weight = weight), stat = 'count', position = 'dodge') +
labs(title = 'Percent Placement by Genre', x = 'Placement', y = 'Percentage')
#---
genrecheck %>% group_by(genres) %>% mutate(weight = 1/n()) %>%
ggplot(aes(x = tsb, fill = genres)) + geom_bar(aes(weight = weight), stat = 'count', position = 'dodge') +
labs(title = 'Percent Placement by Genre', x = 'Placement', y = 'Percentage')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
shiny::runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
shiny::runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
mydoa
mydoa <- t.test(alldead$score, allalive$score) #pval is .02- dead character avg is significantly different from alive character avg
deadalivecheck <- bigjoin2 %>% distinct(uniqueid, character, score, alive)
allalive
allalive <- deadalivecheck %>% filter(alive == 1)
alldead <- deadalivecheck %>% filter(alive == 0)
mydoa <- t.test(alldead$score, allalive$score) #pval is .02- dead character avg is significantly different from alive character avg
mydoa
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
shiny::runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
shiny::runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
#specific work
output$bar1 <- renderPlot(
genrecheck1() %>% group_by(genres) %>% mutate(genre_count = n(), avgscore = round(mean(score), 3)) %>%
ungroup() %>% mutate(genre_update = paste0(genres, "; n=", genre_count, "; Mean Score: ", avgscore)) %>%
ggplot(aes(x = tsb, fill = genres)) + geom_bar()+ scale_y_continuous(breaks= pretty_breaks()) +
scale_fill_manual(values = c("#8344AD", "#27AE60")) + facet_wrap(~genre_update) +
labs(title = 'Genre Comparison by Count', x = 'Placement', y = 'Count')
)
#specific work
output$bar1 <- renderPlot(
genrecheck1() %>% group_by(genres) %>% mutate(genre_count = n(), avgscore = round(mean(score), 3)) %>%
ungroup() %>% mutate(genre_update = paste0(genres, "; n=", genre_count, "; Mean Score: ", avgscore)) %>%
ggplot(aes(x = tsb, fill = genres)) + geom_bar()+ scale_y_continuous(breaks= pretty_breaks()) +
scale_fill_manual(values = c("#8344AD", "#27AE60")) + facet_wrap(~genre_update) +
labs(title = 'Genre Comparison by Count', x = 'Placement', y = 'Count')
)
#examine genres- double check
#bigjoin %>% filter(genres == 'TV')
#--------------------------------------------------------------
genrecheck <- bigjoin1 %>% distinct(uniqueid, character, tsb, score, genres)
genrecheck <- genrecheck %>% filter(genres %in% c('Reality', 'Government'))
genrecheck
genredens <- genrecheck %>% ggplot(., aes(x=tsb, group=genres, fill = genres)) + geom_bar()
genredens
#--------------------------------------------------------------
genrebar <- genrecheck %>% group_by(genres) %>% mutate(genre_count = n()) %>%
ungroup() %>%
mutate(genre_update = paste0(genres, "; n=", genre_count)) %>%
ggplot(aes(x = tsb)) + geom_bar()+ facet_wrap(~genre_update)
genrebar
genrecheck %>% group_by(genres) %>% mutate(genre_count = n(), avgscore = round(mean(score), 3)) %>%
ungroup() %>% mutate(genre_update = paste0(genres, "; n=", genre_count, "; Mean Score: ", avgscore)) %>%
ggplot(aes(x = tsb, fill = genres)) + geom_bar()+ scale_y_continuous(breaks= pretty_breaks()) +
scale_fill_manual(values = c("#8344AD", "#27AE60")) + facet_wrap(~genre_update) +
labs(title = 'Genre Comparison by Count', x = 'Placement', y = 'Count')
class(genre_update)
class(genrecheck$genre_update)
genrecheck %>% group_by(genres) %>% mutate(genre_count = n(), avgscore = round(mean(score), 3)) %>%
ungroup() %>% mutate(genre_update = paste0(genres, "; n=", genre_count, "; Mean Score: ", avgscore))
d <-  genrecheck %>% group_by(genres) %>% mutate(genre_count = n(), avgscore = round(mean(score), 3)) %>%
ungroup() %>% mutate(genre_update = paste0(genres, "; n=", genre_count, "; Mean Score: ", avgscore))
class(d$genre_update)
runApp('Desktop/NYCDSA/RWork/SNATCHGAME/snatchgame')
